Trabalhando com Documentos 
python-docxpermite criar novos documentos, bem como fazer alterações nos existentes. Na verdade, ele só permite fazer alterações em documentos existentes; é que se você começar com um documento que não tem nenhum conteúdo, pode parecer que você está criando um do zero.

Essa característica é poderosa. Grande parte da aparência de um documento é determinada pelas partes que sobram quando você exclui todo o conteúdo. Coisas como estilos e cabeçalhos e rodapés de página estão contidos separadamente do conteúdo principal, permitindo que você coloque uma grande quantidade de personalização em seu documento inicial que aparecerá no documento que você produz.

Vamos percorrer as etapas para criar um documento, um exemplo de cada vez, começando com duas das principais coisas que você pode fazer com um documento: abri-lo e salvá-lo.

Abrindo um documento 
A maneira mais simples de começar é abrir um novo documento sem especificar um arquivo para abrir:

from docx import Document

document = Document()
document.save('test.docx')

Isso cria um novo documento a partir do modelo padrão integrado e o salva inalterado em um arquivo denominado 'test.docx'. 
O chamado “modelo padrão” é na verdade apenas um arquivo Word sem conteúdo, armazenado com o python-docx pacote instalado . 
É praticamente o mesmo que você obtém escolhendo o modelo de documento do Word depois de selecionar o item de menu Arquivo do Word > Novo a partir do modelo… .

REALMENTE abrindo um documento 
Se quiser ter mais controle sobre o documento final ou se quiser alterar um documento existente, é necessário abrir um com um nome de arquivo:

document = Document('existing-document-file.docx')
document.save('new-file-name.docx')

Coisas a serem observadas:

Você pode abrir qualquer arquivo do Word 2007 ou posterior dessa maneira (arquivos .doc do Word 2003 e anteriores não funcionam). 
Embora você possa não ser capaz de manipular todo o conteúdo ainda, o que já está lá será carregado e salvo muito bem. 
O conjunto de recursos ainda está sendo desenvolvido, então você não pode adicionar ou alterar itens como cabeçalhos ou notas de rodapé ainda,
mas se o documento os tiver, python-docxé educado o suficiente para deixá-los sozinhos e inteligente o suficiente para salvá-los sem realmente entender o que são.
Se você usar o mesmo nome de arquivo para abrir e salvar o arquivo, o python-docxirá sobrescrever obedientemente o arquivo original sem peep. 
Você vai querer ter certeza de que é isso que você pretende.
Abrindo um documento 'semelhante a um arquivo' 
python-docxpode abrir um documento a partir de um objeto semelhante a um arquivo . Ele também pode salvar em um objeto semelhante a um arquivo. 
Isso pode ser útil quando você deseja obter o documento de origem ou de destino por meio de uma conexão de rede ou de um banco de dados e 
não deseja (ou não tem permissão para) interagir com o sistema de arquivos. 
Na prática, isso significa que você pode passar um arquivo aberto ou objeto de fluxo StringIO / BytesIO para abrir ou salvar um documento como:

f = open('foobar.docx', 'rb')
document = Document(f)
f.close()

# or

with open('foobar.docx', 'rb') as f:
    source_stream = StringIO(f.read())
document = Document(source_stream)
source_stream.close()
...
target_stream = StringIO()
document.save(target_stream)


O 'rb'parâmetro de modo de abertura de arquivo não é necessário em todos os sistemas operacionais. O padrão 'r'é que às vezes é suficiente, mas o 'b' (selecionar o modo binário) é necessário no Windows e pelo menos em algumas versões do Linux para permitir que o Zipfile abra o arquivo.

Ok, então você tem um documento aberto e tem certeza de que pode salvá-lo em algum lugar mais tarde. O próximo passo é colocar algum conteúdo lá ...